import json
import time
from typing import Dict, List, Union, Optional

import requests

# Authentication
token_url = "https://services.govwin.com/neo-ws/oauth/token"
client_id = "COM0CUIB4TNK7PCMS7SLEGCKA5EA1PP146665UD2BSCS6"
client_secret = "RV8883J63V9H53N5FFCFIRJVJ839R9UU60D144616E1PK"
username = "webservices@religroupinc.com"
password = "8AV8opl2w6tA"

# Settings
RATE_LIMIT_DELAY = 1  # seconds between API calls
MAX_RETRIES = 3

# Models
Office = Dict[str, Dict[str, int]]
Agency = Dict[str, Union[int, List[Office]]]
Department = Dict[str, Union[int, List[Agency]]]

Link = Dict[str, str]
EntityLinks = Dict[str, Link]
GovEntity = Dict[str, Union[int, str, List, EntityLinks]]
GovEntitiesResponse = Dict[str, Union[Dict, List[GovEntity]]]

# Last request timestamp for rate limiting
last_request_time = 0

def enforce_rate_limit():
    """
    Enforces rate limiting between API calls.
    Waits until enough time has passed since the last request.
    """
    global last_request_time
    current_time = time.time()
    time_since_last_request = current_time - last_request_time
    
    if time_since_last_request < RATE_LIMIT_DELAY:
        sleep_time = RATE_LIMIT_DELAY - time_since_last_request
        time.sleep(sleep_time)
    
    last_request_time = time.time()

def make_api_request(url: str, headers: Dict[str, str], retries: int = 0) -> Optional[Dict]:
    """
    Makes an API request with rate limiting and retry logic.
    
    Parameters
    ----------
    url : str
        The URL to request
    headers : Dict[str, str]
        The headers to send with the request
    retries : int
        Current retry count
        
    Returns
    -------
    Optional[Dict]
        The JSON response or None if failed
    """
    enforce_rate_limit()
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as http_err:
        print(f"HTTP error occurred: {http_err} (Status code: {response.status_code})")
        if retries < MAX_RETRIES and response.status_code >= 500:
            print(f"Retrying ({retries+1}/{MAX_RETRIES})...")
            time.sleep(RATE_LIMIT_DELAY * (retries + 1))  # Exponential backoff
            return make_api_request(url, headers, retries + 1)
    except requests.exceptions.ConnectionError:
        print("Connection error. Check your network or the server status.")
        if retries < MAX_RETRIES:
            print(f"Retrying ({retries+1}/{MAX_RETRIES})...")
            time.sleep(RATE_LIMIT_DELAY * (retries + 1))
            return make_api_request(url, headers, retries + 1)
    except requests.exceptions.Timeout:
        print("The request timed out. Try again later or increase the timeout.")
        if retries < MAX_RETRIES:
            print(f"Retrying ({retries+1}/{MAX_RETRIES})...")
            time.sleep(RATE_LIMIT_DELAY * (retries + 1))
            return make_api_request(url, headers, retries + 1)
    except requests.exceptions.RequestException as err:
        print(f"An error occurred: {err}")
    
    return None

# OAuth2 token function
def get_oauth_token():
    payload = {
        'grant_type': 'password',
        'client_id': client_id,
        'client_secret': client_secret,
        'username': username,
        'password': password,
        'scope': 'read'
    }
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}

    try:
        print("\nGetting OAuth token...")
        response = requests.post(url=token_url, headers=headers, data=payload)
        if response and response.status_code == 200:
            token_data = response.json()
            print("Successfully obtained token")
            return token_data['access_token']
        else:
            raise Exception(f"Failed to obtain token: {response.status_code if response else 'No response'}")
    except Exception as e:
        raise Exception(f"Error getting token: {str(e)}")
    
def generate_request_headers(token: str) -> Dict[str, str]:
    """
    Generates response headers for the GET requests

    Parameters
    ----------
    token : str
        GovWin access token generated by the API call

    Returns
    -------
    headers : Dict[str, str]
        Dictionary of the headers.
    """
    return {"Authorization": f"Bearer {token}", "Accept": "application/json"}

def parse_title(data: GovEntitiesResponse) -> Optional[str]:
    """
    Extracts the title from a GovEntities response.
    
    Parameters
    ----------
    data : GovEntitiesResponse
        Response data from the GovWin API
        
    Returns
    -------
    Optional[str]
        The title of the entity or None if not found
    """
    try:
        return data["govEntities"][0]["title"]
    except (KeyError, IndexError):
        print("Could not parse title from response")
        return None

def extract_children_url(data: GovEntitiesResponse) -> Optional[str]:
    """
    Extracts the children URL from a GovEntities response.
    
    Parameters
    ----------
    data : GovEntitiesResponse
        Response data from the GovWin API
        
    Returns
    -------
    Optional[str]
        The URL to get children entities or None if not found
    """
    try:
        return data["govEntities"][0]["links"]["children"]["href"]
    except (KeyError, IndexError):
        print("Could not find children URL in response")
        return None

def get_department_name(department_id: int, base_url: str, headers: Dict[str, str]) -> Optional[str]:
    """
    Gets the department name from ID as generated by GovWin.

    Parameters
    ----------
    department_id : int
        The unique department ID from the GovWin API.
    base_url : str
        String for the base url of the govEntities GovWin API
    headers : Dict[str, str]
        Dictionary of request headers

    Returns
    -------
    Optional[str]
        String for the department name or None if not found.
    """
    url = f"{base_url}/{department_id}"
    data = make_api_request(url, headers)
    
    if data:
        department_name = parse_title(data)
        return department_name
    
    return None

def get_children_entities(parent_id: int, base_url: str, headers: Dict[str, str]) -> List[Dict]:
    """
    Gets the children entities (agencies or offices) for a parent entity.
    
    Parameters
    ----------
    parent_id : int
        The ID of the parent entity
    base_url : str
        Base URL for the API
    headers : Dict[str, str]
        Request headers
        
    Returns
    -------
    List[Dict]
        List of child entities or empty list if none found
    """
    url = f"{base_url}/{parent_id}"
    data = make_api_request(url, headers)
    
    if not data:
        return []
    
    children_url = extract_children_url(data)
    if not children_url:
        return []
    
    children_data = make_api_request(children_url, headers)
    if not children_data or "govEntities" not in children_data:
        return []
    
    return children_data["govEntities"]

def get_agencies_from_department_id(department_id: int, base_url: str, headers: Dict[str, str]) -> List[Agency]:
    """
    Gets all agencies belonging to a department.
    
    Parameters
    ----------
    department_id : int
        The ID of the department
    base_url : str
        Base URL for the API
    headers : Dict[str, str]
        Request headers
        
    Returns
    -------
    List[Agency]
        List of agency dictionaries
    """
    print(f"Getting agencies for department ID: {department_id}")
    agencies = []
    
    # Get all agencies for this department
    agency_entities = get_children_entities(department_id, base_url, headers)
    
    for agency_entity in agency_entities:
        agency_id = agency_entity.get("id")
        agency_name = agency_entity.get("title")
        
        if agency_id and agency_name:
            # Get offices for this agency
            offices = get_offices_from_agency_id(agency_id, base_url, headers)
            
            agency = {
                agency_name: {
                    "id": agency_id,
                    "offices": offices
                }
            }
            agencies.append(agency)
    
    return agencies

def get_offices_from_agency_id(agency_id: int, base_url: str, headers: Dict[str, str]) -> List[Office]:
    """
    Gets all offices belonging to an agency.
    
    Parameters
    ----------
    agency_id : int
        The ID of the agency
    base_url : str
        Base URL for the API
    headers : Dict[str, str]
        Request headers
        
    Returns
    -------
    List[Office]
        List of office dictionaries
    """
    print(f"Getting offices for agency ID: {agency_id}")
    offices = []
    
    # Get all offices for this agency
    office_entities = get_children_entities(agency_id, base_url, headers)
    
    for office_entity in office_entities:
        office_id = office_entity.get("id")
        office_name = office_entity.get("title")
        
        if office_id and office_name:
            office = {
                office_name: {
                    "id": office_id
                }
            }
            offices.append(office)
    
    return offices

def generate_gov_entities(
        department_ids: List[int],
        token: str,
        base_url = "https://services.govwin.com/neo-ws/govEntities") -> Dict[str, List[Department]]:
    """
    Wrapper for creating the government entities dictionary.

    Parameters
    ----------
    department_ids : List[int]
        A list of department IDs to include in the output. Only departments
        with matching IDs will be added to the result.
    token : str
        The OAuth token for authentication
    base_url : str
        Base URL for the API

    Returns
    -------
    Dict[str, List[Department]]
        A dictionary with the key "Departments" mapping to a list of
        department dictionaries. Each department contains nested agencies
        and offices, filtered by the provided department IDs.
    """
    headers = generate_request_headers(token)
    gov_entities_dict = {"Departments": []}
    
    for department_id in department_ids:
        department_name = get_department_name(department_id, base_url, headers)
        
        if not department_name:
            print(f"Warning: Could not retrieve name for department ID {department_id}")
            continue
        
        # Get agencies for this department
        agencies = get_agencies_from_department_id(department_id, base_url, headers)
        
        department_structure = {
            department_name: {
                "id": department_id,
                "agencies": agencies
            }
        }
        gov_entities_dict["Departments"].append(department_structure)
    
    return gov_entities_dict

def generate_json_from_dict(gov_entities_dict, filename="gov_entities.json"):
    """
    Writes the government entities dictionary to a JSON file.
    
    Parameters
    ----------
    gov_entities_dict : Dict
        The dictionary to write to a file
    filename : str
        The name of the output file
    """
    with open(filename, "w") as file:
        json.dump(gov_entities_dict, file, indent=2)
    print(f"Successfully wrote data to {filename}")

if __name__ == "__main__":
    # Example usage
    token = get_oauth_token()
    
    # List of department IDs to include
    department_ids = [25212, 25265]  # HHS, DHS
    
    # Generate the government entities structure
    gov_entities_dict = generate_gov_entities(department_ids=department_ids, token=token)
    
    # Save to JSON file
    generate_json_from_dict(gov_entities_dict)
    
    # Print a preview
    print("\nPreview of generated structure:")
    print(json.dumps(gov_entities_dict, indent=2))